solve(P) :-
	search([3,3,1],[0,0,0],[[3,3,1]], P).

search([F1, H1, B1], [F1, H1, B1], _, []).

search([F1, H1, B1], [F2, H2, B2], Visited, P) :-
	cross([F1, H1, B1], [F, H, B]),
	safe_state([F, H, B]),
	not(member([F, H, B], Visited)),
	search([F, H, B], [F2, H2, B2], [[F, H, B] | Visited], P2),
	P = [[[F1, H1, B1], [F, H, B] ]| P2].

% One fox rows to the far side
cross([F1, H1, 1], [F2, H1, 0]) :-
	F1 > 0, F2 is F1 - 1.

% Two foxes row to the far side
cross([F1, H1, 1], [F2, H1, 0]) :-
	F1 > 1, F2 is F1 - 2.

% One hen rows to the far side 
cross([F1, H1, 1], [F1, H2, 0]) :-
	H1 > 0, H2 is H1 - 1.

% Two hens row to the far side
cross([F1, H1, 1], [F1, H2, 0]) :-
	H1 > 1, H2 is H1 - 2.

% One hen and one fox row to the far side
cross([F1, H1, 1], [F2, H2, 0]) :-
	H1 > 0, F1 > 0, 
	H2 is H1 - 1, F1 is F1 - 1.

% One fox rows to near side
cross([F1, H1, 0], [F2, H1, 1]) :-
	F1 < 3, F2 is F1 + 1.

% Two foxes row to near side
cross([F1, H1, 0], [F2, H1, 1]) :-
	F1 < 2, F2 is F1 + 2.

% One hen rows to the near side
cross([F1, H1, 0], [F1, H2, 1]) :-
	H1 < 3, H2 is H1 + 1.

% Two hens row to the near side
cross([F1, H1, 0], [F1, H2, 1]) :-
	H1 < 2, H2 is H1 + 2.

% One hen and one fox row to the near side
cross([F1, H1, 0], [F2, H2, 1]) :-
	H1 < 3, F1 < 3,
	F2 is F1 + 1, H2 is H1 + 1.

safe_state([F1, H1, _]) :-
	(F1 =< H1 ; B = 0),
	(F2 is 3-F1, H2 is 3-H1),
	(F2 =< H2; H2 = 0), !.